* properties marked in the "support Mapnik 2.x" with "no eval" can't be evaluated by an eval statement. A warning will be issued when compiling.

=== General properties ===
|= CSS parameter |= Description |= Default value |= Compatibility MapCSS 0.2
| layer | the highest level of ordering objects | the value of tag 'layer' (or 0) | see below
| z-index | specify the order of objects in each layer: The objects with higher z-index are drawn on top of objects with lower z-index | 0 | YES

* Property 'layer': MapCSS 0.2 does define the rendering order dependend on the layer-tag of the objects, but does not define a way to change that order from the stylesheet.

=== Canvas properties ===
* Not supported yet

=== Point properties ===
|= CSS parameter |= Description |= Mapnik parameter |= support Mapnik 2.x |= Compatibility MapCSS 0.2
| icon-image | URL (absolute or relative) of an image to use as an icon. | file | yes | YES
| icon-opacity | Opacity of the icon image | opacity | no eval | YES
| icon-width | Width of image. | - | automatic | IGNORED. scaling should be applied.
| icon-height | Height of image. | - | automatic | IGNORED. scaling should be applied.

=== Line properties ===
|= CSS parameter |= Description |= Mapnik parameter |= support Mapnik 2.x |= Compatibility MapCSS 0.2
| color | Colour of the line. | stroke | no eval | YES
| width | The line width in pixels. | stroke-width | no eval ; branch [[https://github.com/mapnik/mapnik/tree/stroke-width-expr|stroke-width-expr]] adds support | YES
| opacity | How transparent the line is, from 0 (transparent) to 1 (opaque). | stroke-opacity | no eval | YES
| image |  The URL of an image to use for filling the line | | yes | YES
| linejoin | The style for line corners: 'round' (default), 'miter' or 'bevel'. | stroke-linejoin | | YES
| linecap | The style for the end of the line: 'none' (default), 'round' or 'square' | stroke-linecap | Mapnik uses 'butt' instead of 'none'; will be automatically mapped. | YES
| dashes | An array of alternating on/off lengths | stroke-dasharray | no eval | YES
| casing-color | Colour of the casing (border) of a line. | stroke | no eval | YES
| casing-width | Width of the casing (border) of the line (add to 'width' of the line). | stroke-width | no eval ; branch [[https://github.com/mapnik/mapnik/tree/stroke-width-expr|stroke-width-expr]] adds support | YES
| casing-opacity | How transparent the casing is, from 0 (transparent) to 1 (opaque). | stroke-opacity | no eval | YES
| casing-linejoin | The style for casing corners: 'round' (default), 'miter' or 'bevel'. | stroke-linejoin | | YES
| casing-linecap | The style for the end of the casing: 'none' (default), 'round' or 'square' | stroke-linecap | see 'linecap' | YES
| casing-dashes | An array of alternating on/off lengths | stroke-dasharray | no eval | YES

* MapCSS 0.2 properties not (yet) supported: extrude, extrude-*

=== Area properties ===
|= CSS parameter |= Description |= Mapnik parameter |= support Mapnik 2.x |= Compatibility MapCSS 0.2
| fill-color | Colour in which to fill the area. | fill | no eval | YES
| fill-opacity | How transparent the fill is, from 0 (transparent) to 1 (opaque) | fill-opacity | no eval | YES
| fill-image |  The URL of an image to use for filling the area | | yes | YES

=== Label properties ===
|= CSS parameter |= Description |= Mapnik parameter |= support Mapnik 2.x |= Compatibility MapCSS 0.2
| max-width | The maximum width of a text label for a point, after which it should wrap onto the next line. | wrap-width | no eval | YES
| text-offset | The vertical offset from the centre of the way or point. | dy | no eval | YES
| text-position | Whether the text follows the path of the way ('line') or is centred on the area ('center', default) | placement | | YES
| font-family | Name of the font to use (default: "DejaVu Sans") | | see 'Fonts' below | YES
| font-weight |  'bold' or 'normal' (default) | | | YES
| font-style |  'italic' or 'normal' (default) | | | YES
| font-size | Size of the text | size | eval() with ExpressionFormat | YES
| text-color | Colour of text | fill | eval() with ExpressionFormat and branch [[https://github.com/mapnik/mapnik/tree/harfbuzz|harfbuzz]] | YES
| text-halo-color | The colour (hex or CSS) of the 'halo' or 'pull-out' used to make the text stand out from features underneath it. | halo-fill | no eval | YES
| text-halo-radius |  The radius of the halo | halo-radius | eval() with ExpressionFormat | YES
| text | The text for the label | | yes | YES
| text-spacing | Space between repeated labels. If spacing is 0 only one label is placed (default). | spacing | yes | no standard

* MapCSS 0.2 properties not (yet) supported: font-variant, text-decoration, text-transform

==== "with ExpressionFormat" ====
<TextSymbolizer> can't read parameters from expressions, but <ExpressionFormat> (which is an undocumented feature in Mapnik 2 as of 2013-07) can. <ExpressionFormat> (as well as <Format>) is a child of TextSymbolizer and can format a part of the symbol. Therefore you can do:
{{{
  <TextSymbolizer face-name="something"><ExpressionFormat size="[font-size]" halo-radius="[text-halo-radius]">[text]</ExpressionFormat></TextSymbolizer>
}}}

=== Fonts ===
There's a fontset for each font-family / font-weight / font-style combination, defined in default-template.mapnik. There's a default fallback to unifont too (which might change in the future). The name of the fontsets is "font-family - font-weight - font-style", e.g. "DejaVu Serif Condensed - bold - italic".

Also all possible font-families are defined in default.mapcss in the @values font-family clause.

=== Shields ===
|= CSS parameter |= Description |= Note Mapnik 2.x |= Compatibility MapCSS 0.2
| shield-placement | Whether the shields follows the path of the way ('line', default for lines) or is centred on the area ('point', default for other features) | placement | | no standard
| shield-font-family | Name of the font to use (default: same as font-family) | no eval | no standard
| shield-font-weight |  'bold' or 'normal' (default: same as font-weight) | no eval | no standard
| shield-font-style |  'italic' or 'normal' (default: same as font-style) | no eval | no standard
| shield-font-size | Size of the text (default: same as font-size) | no eval | no standard
| shield-text-color | Colour of text (default: #000000) | no eval | no standard
| shield-text-halo-color | The colour (hex or CSS) of the 'halo' or 'pull-out' used to make the text stand out from features underneath it. | no eval | no standard
| shield-text-halo-radius |  The radius of the halo | no eval | no standard
| shield-text | The text for the shield | YES
| shield-spacing | Space between repeated shields. If spacing is 0 only one label is placed (default: 196px). | no eval | no standard
| shield-opacity |  How transparent the shield is, from 0 (transparent) to 1 (opaque) (default: 1) | no eval | YES
| shield-image |  The URL (absolute or relative) of an image to use as a background for text. | | YES

* MapCSS 0.2 properties not (yet) supported: shield-color, shield-frame-color, shield-frame-width, shield-casing-color, shield-casing-width, shield-shape.
* Currently a shield-image is mandatory.
