For more information about MapCSS see
* http://wiki.openstreetmap.org/wiki/MapCSS
* http://wiki.openstreetmap.org/wiki/MapCSS/0.2
* http://josm.openstreetmap.de/wiki/Help/Styles/MapCSSImplementation

== General Structure ==
A MapCSS style sheet has rules of the form

{{{
selector {
  prop: value;
  ...
  prop: value;
}
}}}

For each rule, if the selector applies the properties from the { } block are set. If a property has already been set, it will be overridden.

Additionally, comments can be made using {{{//}}} to comment the rest of the line out, or using {{{/*}}} and {{{*/}}} to comment out everything between these end points.

== Selectors ==
Every selector may have several elements: type, class, zoom, condition, pseudo class, pseudo element, grouping and link.

E.g.
* {{{way.public[highway=residential]}}}
* {{{way|z11-14[amenity=parking][access=public]:closed:new::casing}}}
* {{{relation[type=route][route=foot] > way::relation_underlay}}}

=== Type selector ===
First part of a selector; required.

|= Selector |= Description
| * | Matches with any object
| node, way, relation | Matches with objects of the given type
| area | Matches polygons (polygons as from osm2pgsql, incl. relations with type multipolygon)
| point | Currently an alias for 'node'
| line | Matches lines (way or relation)
| canvas | The background (NOT SUPPORTED YET)

The type of an object is retrieved from the 'types'-array in object-value (see [[API.md]]). You can add/remove types from your database query.

* Compatibility MapCSS 0.2: YES (with the exception of 'canvas')

=== Class selector ===
After the type selector, separated by '.'. Optional.

Example:
{{{
way.minor_road {
  ...
}
}}}

See below under 'Assignments - Classes'.

* Compatibility MapCSS 0.2: YES

=== Zoom selector ===
After the class selector, separated by '|'. Optional.

The zoom selector restricts the range of zoom levels at which a rule is applied. If the zoom selector is omitted, the condition is valid for all zoom levels.

|= Selector |= Description
| {{{|z5}}} | Only at zoom level 5.
| {{{|z5-}}} | Zoom level 5 and above.
| {{{|z-5}}} | Zoom level 5 and below.
| {{{|z5-10}}} | Zoom level 5 to 10.

* Compatibility MapCSS 0.2: YES

=== Condition selector ===
After the zoom selector, may be specified multiple times. Every condition is enclosed in [...]. Optional.

You can combine several conditions, they will be combined by logical AND. E.g. {{{*[highway=primary][bridge]}}} matches all objects with tags highway=primary AND bridge=yes.

Matches are always case sensitive (except regexp). Valid characters for keys are letters, digits, '-', '_' and ':'. Valid characters for values are all characters expect '"', ''' and ']'. You may quote keys and values with '"' or ''' to use special characters.

==== Comparision expressions ===
|= Operator |= Description |= Compatibility
| = | Exact match of the value. E.g. {{{[highway=residential]}}}. | MapCSS 0.2
| != | Value not equal. Negation of =. | MapCSS 0.2
| <, >, <=, >= | Comparision for numeric values (using floats). | MapCSS 0.2
| ^= | Prefix match. Value starts with 'string', e.g. {{{[name^=Lon]}}} matches "London". | no standard
| $= | Suffix match. Value ends with 'string', e.g. {{{[name$=dorf]}}} matches "Enzersdorf". | no standard
| *= | Substring match. Value contains 'string', e.g. {{{[name*=ob]}}} matches "Foobar". | no standard
| ~~= | List membership. Tag value consits of a list of ;-separated values. E.g. {{{[amenity~=atm]}}} matches {{{amenity=atm;bank}}}. | no standard
| =~ | Regular expression match. Value matches given regular expression, e.g. {{{[highway=~/.*ary/]}}} matches primary. Use {{{[highway=~/.*ary/i]}}} for case insensitive matches. | MapCSS 0.2ยน

* You can prepend any of the expressions with ! to negate match, e.g. {{{[amenity*=bank][!amenity*=atm]}}} matches amenity=bank, amenity=bank;post_office but not amenity=bank;atm.

ยน MapCSS 0.2 does not define case insensitive matches.

==== Test of tag presence/absense ===
|= Condition |= Description
| [key] | Tests whether object has tag 'key'.
| [!key] | Tests whether no 'key' is present.

* Compatibility MapCSS 0.2: PARTLY, no check for 'no/false' yet

=== Pseudo classes ===
After the condition selector(s), separated by ':'. Several pseudo classes may be specified. Optional.

NOT SUPPORTED YET.

=== Pseudo elements ===
After the pseudo class(es), separated by '::'. Optional.

Pseudo elements can be used to create more than one style for a single object, e.g. '::casing' to draw a casing. A property {{{object-z-index}}} may be specified to order pseudo elements.

If you omit the pseudo element descriptor in the selector, this is the same as using ::default.

You may enclose the pseudo element in brackets (e.g. "::(default)") to suppress creating a pseudo element from this statement. This is used internally to set default values.

To set properties for all possible pseudo elements, you may use '::*' or '::(*)'. This is used internally to set default values.

* Compatibility MapCSS 0.2: not defined in standard

=== Grouping ===
You may use a list of properties with several selectors, separated by ','. E.g.
{{{
area[landuse=forest],
area[natural=wood]
{
  color: green;
  width: 2;
}
}}}

* Compatibility MapCSS 0.2: YES

=== Link selector ===
You can combine several selectors to formulate conditions on relations between objects. The selector always consists of three parts: parent (or relating object) selector, link condition, object selector. E.g. {{{relation[route=bus] >[role=platform] way[highway]}}} matches any way with a highway tag which is member of a relation with route bus where the member role is platform. If the way is member of several relations the statement is processed multiple times.

You can access the tags of the parent with parent_tag(), though changes via set/unset are not available. The link condition will be set a couple of tags (depending on the type of condition), which can be accessed with link_tag(). These tags are also available as link condition (e.g. >[index=2]).

The following link conditions are available:

==== '>' ====
The object is member of a parent relation.

The following link tags will be set:
* index: an arbitrary counter for each matching parent (starting with 1).
* role: the member role of the object.
* sequence_id: The index of the object in the relation.
* member_id: The ID of the member.

TODO: http://josm.openstreetmap.de/wiki/Help/Styles/MapCSSImplementation#Linkselector defines 'index' as the nth matching object in the relation.

==== '<' ====
The object is a relation. The statement will be processed for all members (which is the 'parent object' in that case. E.g. {{{node <[role=stop] relation[route=bus]}}}.

The following link tags will be set:
* index: an arbitrary counter for each matching parent (starting with 1).
* role: the member role of the object.
* sequence_id: The index of the object in the relation.
* member_id: The ID of the member.

==== 'near' ====
Objects which are "near" another object, e.g. {{{way[highway] near[index=1][distance<50] node[addr:housenumber]}}} matches any housenumber which is near a highway (max. 50 pixels). The {{{index=1}}} selects only the closest highway.

The following link tags will be set:
* index: the nth parent object near the current feature (starting with 1, the closest parent object).
* distance: distance between the objects in pixels.

Note: If no condition on link tag 'distance' with '<' or "<=' is used (e.g. {{{distance<50}}}), features intersecting a bounding box of 100px around the child object will be found.

== Properties ==
You may specify arbitrary properties. They will be treated as text values. Declarations are written by enclosing a set of style specifiers in curly braces.

E.g.

{{{
{
  opacity: 0.5;
  color: #ff0000;
  background-color: #00FF00;
  width: 2px;
  text: "2px";
}
}}}

* You may enclose strings by single or double quotes.
* You may specify values with a unit, default: 'px' (Pixels on screen). Other supported unites: 'u' (Units in 900913 projection on the map), 'm' (Meters on the map; NOT IMPLEMENTED YET: currently 'u' is used instead).

* Compatibility MapCSS 0.2: MOSTLY
** no definition about quoting in MapCSS
** color definition "rgb(1, 0.5, 0)" and url locator "url(img/foo.png)" not supported yet

See file [[default.creole]] for properties of styles based on the 'default' style definition.

=== Assignments ===
You may assign values to tags of the current object. This is independent from the current pseudo element descriptor.

|= Declaration |= Description
| set highway_class=minor; | set tag 'highway_class' to value 'minor'.
| set highway_class=eval(...); | use an eval expression to set tag 'highway_class'.
| set highway_class; | set tag 'highway_class' to 'yes'.
| unset highway_class; | remove the tag 'highway_class'.

Example:
{{{
way[highway=unclassified],
way[highway=residential] {
  set highway_class=minor;
}
way[highway_class=minor] {
  color: #ffffff;
  width: 2;
}
}}}

* Compatibility MapCSS 0.2: YES (though 'unset' is not defined in MapCSS)

=== Eval expressions ===
You can compute values using an eval instrucion:
{{{
{
  opacity: eval("tag(population)/100000");
  set description=eval(cond(tag(population)>1000000,"large city","small city"));
}}}
}

Either set a property for the current pseudo element or set a tag for the current object.

See file [[eval.creole]] for details.

* Compatibility MapCSS 0.2: YES

=== Assignments - Classes ===
You can set tags beginning with a full-stop to simulate classes:
{{{
{ set .minor_road; }
}}}

You can then use .minor_road (as above) in the class selector:
{{{
way.minor_road {
  color: #ffffff;
}
}}}

* Compatibility MapCSS 0.2: YES

=== Geometry ===
The special property "geo" will be predefined on every object. You may change it with eval statements.

Example:
{{{
point[place=village] {
  geo: eval(buffer(prop(geo), 10px));
  fill-color: #00ff00;
}
}}}

This will draw a 10px wide buffer around every node with 'place=village'.

* Compatibility MapCSS 0.2: not defined in standard

== Combining features ==
In pgmapcss 0.3 a new feature has been introduced: 'combine'. It allows combining several similar features into one, e.g. all streets with the same name. This may improve text rendering (Streets in OpenStreetMap are usually split into short junks, as type of street changes: oneway, bus routes, lanes, ...).

You need a selector which matches the features you want to combine, there you add an instruction {{{combine TYPE ID}}}, where ID is usually an eval-statement on the tags you want to group the features on. The TYPE can be used as object type in a selector. Note that there is no ':' after "combine".

The tags of the input features will be merged, e.g. the tags of the following input features "amenity=bar kitchen=pizza;kebap" and "amenity=bar kitchen=pizza;noodles opening_hours=never" will be merged to "amenity=bar kitchen=pizza;noodles;kebap opening_hours=never". Modifications of tags via set/unset-statements BEFORE the combine-statement will be available in the combined feature.

The geometry of all input features will collected. Therefore it might be useful to merge the lines (line_merge).

Example:
{{{
line[highway] {
  combine street eval(tag(name));
}

street {
  geo: eval(line_merge(prop(geo)));
  text: eval(tag(name));
}
}}}
