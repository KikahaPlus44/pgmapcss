For more information about MapCSS see
* http://wiki.openstreetmap.org/wiki/MapCSS
* http://wiki.openstreetmap.org/wiki/MapCSS/0.2
* http://josm.openstreetmap.de/wiki/Help/Styles/MapCSSImplementation

== General Structure ==
A MapCSS style sheet has rules of the form

{{{
selector {
  prop: value;
  ...
  prop: value;
}
}}}

For each rule, if the selector applies the properties from the { } block are set. If a property has already been set, it will be overridden.

Additionally, comments can be made using "//" to comment the rest of the line out, or using "/*" and "*/" to comment out everything between these end points.

== Selectors ==
Every selector may have several elements: type, class, zoom, condition, pseudo class, pseudo element, grouping and link.

E.g.
* {{{way.public[highway=residential]}}}
* {{{way|z11-14[amenity=parking][access=public]:closed:new::casing}}}
* {{{relation[type=route][route=foot] > way::relation_underlay}}}

=== Type selector ===
First part of a selector; required.

|= Selector |= Description
| * | Matches with any object
| node, way, relation | Matches with objects of the given type
| area | Matches polygons (polygons as from osm2pgsql, incl. relations with type multipolygon)
| point | Currently an alias for 'node'
| line | Matches lines (way or relation)
| canvas | The background (NOT SUPPORTED YET)

The type of an object is retrieved from the 'types'-array in object-value (see [[API.md]]). You can add/remove types from your database query.

=== Class selector ===
After the type selector, separated by '.'. Optional.

Example:
{{{
way.minor_road {
  ...
}
}}}

See below under 'Assignments - Classes'.

=== Zoom selector ===
After the class selector, separated by '|'. Optional.

The zoom selector restricts the range of zoom levels at which a rule is applied. If the zoom selector is omitted, the condition is valid for all zoom levels.

|= Selector |= Description
| {{{|z5}}} | Only at zoom level 5.
| {{{|z5-}}} | Zoom level 5 and above.
| {{{|z-5}}} | Zoom level 5 and below.
| {{{|z5-10}}} | Zoom level 5 to 10.

=== Condition selector ===
After the zoom selector, may be specified multiple times. Every condition is enclosed in [...]. Optional.

You can combine several conditions, they will be combined by logical AND. E.g. {{{*[highway=primary][bridge]}}} matches all objects with tags highway=primary AND bridge=yes.

Matches are always case sensitive (except regexp). Valid characters for keys are letters, digits, '-', '_' and ':'. Valid characters for values are all characters expect '"', ''' and ']'. You may quote keys and values with '"' or ''' to use special characters.

==== Comparision expressions ===
|= Operator |= Description
| = | Exact match of the value. E.g. {{{[highway=residential]}}}.
| != | Value not equal. Negation of =.
| <, >, <=, >= | Comparision for numeric values (using floats).
| ^= | Prefix match. Value starts with 'string', e.g. {{{[name^=Lon]}}} matches "London".
| $= | Suffix match. Value ends with 'string', e.g. {{{[name$=dorf]}}} matches "Enzersdorf".
| *= | Substring match. Value contains 'string', e.g. {{{[name*=ob]}}} matches "Foobar".
| ~= | List membership. Tag value consits of a list of ;-separated values. E.g. {{{[amenity~=atm]}}} matches {{{amenity=atm;bank}}}.
| =~ | Regular expression match. Value matches given regular expression, e.g. {{{[highway=~/.*ary/]}}} matches primary. Use {{{[highway=~/.*ary/i]}}} for case insensitive matches.

* You can prepend any of the expressions with ! to negate match, e.g. {{{[amenity*=bank][!amenity*=atm]}}} matches amenity=bank, amenity=bank;post_office but not amenity=bank;atm.

==== Test of tag presence/absense ===
|= Condition |= Description
| [key] | Tests whether object has tag 'key'.
| [!key] | Tests whether no 'key' is present.

=== Pseudo classes ===
After the condition selector(s), separated by ':'. Several pseudo classes may be specified. Optional.

NOT SUPPORTED YET.

=== Pseudo elements ===
After the pseudo class(es), separated by '::'. Optional.

Pseudo elements can be used to create more than one style for a single object, e.g. '::casing' to draw a casing. A property {{{object-z-index}}} may be specified to order pseudo elements.

If you omit the pseudo element descriptor in the selector, this is the same as using ::default.

=== Grouping ===
You may use a list of properties with several selectors, separated by ','. E.g.
{{{
area[landuse=forest],
area[natural=wood]
{
  color: green;
  width: 2;
}
}}}

=== Link selector ===
Parent, Child or nearby relations.

NOT SUPPORTED YET.

== Properties ==
You may specify arbitrary properties. They will be treated as text values. Declarations are written by enclosing a set of style specifiers in curly braces.

E.g.

{{{
{
  opacity: 0.5;
  color: #ff0000;
  background-color: rgb(1.0, 0.0, 0.0);
}
}}}

=== Assignments ===
You may assign values to tags of the current object. This is independent from the current pseudo element descriptor.

|= Declaration |= Description
| set highway_class=minor; | set tag 'highway_class' to value 'minor'.
| set highway_class=eval(...); | use an eval expression to set tag 'highway_class'.
| set highway_class; | set tag 'highway_class' to 'yes'.
| unset highway_class; | remove the tag 'highway_class'.

Example:
{{{
way[highway=unclassified],
way[highway=residential] {
  set highway_class=minor;
}
way[highway_class=minor] {
  color: #ffffff;
  width: 2;
}
}}}

=== Eval expressions ===
You can compute values using an eval instrucion:
{{{
{
  opacity: eval("tag(population)/100000");
  set description=eval(cond(tag(population)>1000000,"large city","small city"));
}}}
}

Either set a property for the current pseudo element or set a tag for the current object.

See file [[eval.creole]] for details.

=== Assignments - Classes ===
You can set tags beginning with a full-stop to simulate classes:
{{{
{ set .minor_road; }
}}}

You can then use .minor_road (as above) in the class selector:
{{{
way.minor_road {
  color: #ffffff;
}
}}}
