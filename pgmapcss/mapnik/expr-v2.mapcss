/* DEFAULT VALUES (and make sure that result columns are available) */
@type text tag_value;
@type shield-text tag_value;
@type width int;
@type icon-image icon;

// The follwing properties default to the final value of another property
@default_other casing-offset offset;
@default_other casing-linecap linecap;
@default_other casing-linejoin linejoin;
@default_other shield-font-family font-family;
@default_other shield-font-weight font-weight;
@default_other shield-font-style font-style;
@default_other shield-font-size font-size;
@default_other shield-text-transform text-transform;

// @values: Possible values of properties; the first value is the default value
// linecap actually has 'none' as default value. the following statement automatically replaces 'none' by 'butt'
@values linecap "butt;round;square";
@values casing-linecap "butt;round;square";
@values linejoin "round;miter;bevel";
@values casing-linejoin "round;miter;bevel";
@values text-position "center;line";
@values font-family "DejaVu Sans;DejaVu Sans Condensed;DejaVu Sans Mono;DejaVu Serif;DejaVu Serif Condensed";
@values font-weight "normal;bold";
@values font-style "normal;italic";
@values text-transform "none;uppercase;lowercase;capitalize";
@values shield-text-transform "none;uppercase;lowercase;capitalize";
@values icon-size "24;18;12";

// @postprocess: To calculate final value of property X call
// eval-function as specified.
@postprocess text eval(text_transform(prop("text"), prop("text-transform")));
@postprocess shield-text eval(text_transform(prop("shield-text"), prop("shield-text-transform")));
@postprocess final-casing-width eval(prop("width") + prop("casing-width") * 2);
@postprocess final-icon-image eval(cond(
  prop('icon-image') && substr(prop('icon-image'), 0, 5) == 'icon:',
    style_id() . '.icons/' . substr(prop('icon-image'), 5) . '-' . prop('icon-color') . '-' . prop('icon-size'). '.svg',
    prop('icon-image')
  ));

// @depend_property: don't check values for e.g. 'text-position' if no 'text' is set
@depend_property text "text-position;text-transform;font-family;font-weight;font-style";
@depend_property width "linecap;linejoin";
@depend_property casing-width "casing-offset;casing-linecap;casing-linejoin";
@depend_property shield-text "shield-font-family;shield-font-weight;shield-font-style;shield-font-size;shield-text-transform";

// @style_element_property
@style_element_property fill fill-color;
@style_element_property casing casing-width;
@style_element_property line "width;image";
@style_element_property point icon-image;
@style_element_property point-text text;
@style_element_property line-text text;
@style_element_property shield shield-text;

*::(*) {
// General
  z-index: 0;
  layer: eval(any(int(tag('layer')), 0));
// PointSymbolizer
  icon-image: ;
  icon-opacity: 1;
  icon-color: #444444;
  icon-size: 24;
  final-icon-image: ; // used internally to add width and casing-width
// PolygonSymbolizer
  fill-color: ;
  fill-opacity: 1;
// PolygonPatternSymbolizer
  fill-image: ;
// LineSymbolizer
  width: ;
  offset: 0;
  color: ;
  opacity: 1;
  linejoin: round;
  linecap: none;
  dashes: none;
// Casing LineSymbolizer
  casing-width: ;
  casing-offset: ;
  casing-color: ;
  casing-opacity: 1;
  casing-linejoin: ;
  casing-linecap: ;
  casing-dashes: none;
  final-casing-width: ; // used internally to add width and casing-width
// LinePatternSymbolizer
  image: ;
// TextSymbolizer
  text: ;
  font-family: "DejaVu Sans";
  font-weight: normal;
  font-style: normal;
  font-size: 12;
  text-color: #000000;
  text-halo-color: #ffffff;
  text-opacity: 1;
  text-halo-radius: 0;
  text-offset: 0;
  max-width: 0;
  // not in MapCSS 0.2 standard:
  character-spacing: 0;
  wrap-character: " ";
  text-position: center;
  text-spacing: 0;
  text-transform: none;
// ShieldSymbolizer
  shield-text: ;
  shield-spacing: 196;
  shield-image: ;
  shield-opacity: 1;
  shield-placement: point;
  shield-text-color: #000000;
  shield-font-family: ;
  shield-font-weight: ;
  shield-font-style: ;
  shield-font-size: ;
  shield-text-halo-color: #ffffff;
  shield-text-opacity: 1;
  shield-text-halo-radius: 0;
  shield-text-transform: ;
}
line::(*) {
  shield-placement: line;
}
canvas {
  fill-color: #00000000;
}
