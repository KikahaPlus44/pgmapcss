@type text tag_value;
@type width int;
@type icon-image icon;
@type color color;
@type casing-color color;
@type dashes-background-color color;
@type casing-dashes-background-color color;
@type icon-color color;
@type fill-color color;
@type fill-image image;
@type text-color color;
@type text-halo-color color;
@type symbol-stroke-color color;
@type symbol-fill-color color;
@type width pixels;
@type offset pixels;
@type casing-width pixels;
@type casing-offset pixels;
@type text-offset pixels;
@type font-size numeric;
@type dashes dashes;
@type casing-dashes dashes;
@type icon-rotation angle;
@type symbol-rotation angle;
@type image image;
@type repeat-image image;
@type repeat-image-offset pixels;

// The follwing properties default to the final value of another property
@default_other casing-offset offset;
@default_other casing-linecap linecap;
@default_other casing-linejoin linejoin;
@default_other repeat-image-offset offset;
@default_other casing-miterlimit miterlimit;

// @values: Possible values of properties; the first value is the default value
// linecap actually has 'none' as default value. the following statement automatically replaces 'none' by 'butt'
@values linecap "butt;round;square";
@values casing-linecap "butt;round;square";
@values linejoin "round;miter;bevel";
@values casing-linejoin "round;miter;bevel";
@values text-position "center;line";
@values font-family "DejaVu Sans;DejaVu Sans Condensed;DejaVu Sans Mono;DejaVu Serif;DejaVu Serif Condensed";
@values font-weight "normal;bold";
@values font-style "normal;italic";
@values text-transform "none;uppercase;lowercase;capitalize";
@values icon-width "24;18;12";
@values text-anchor-vertical "below;above";
@values text-anchor-horizontal "middle;left;right";
@values repeat-image-align "center;top;bottom";

// @postprocess: To calculate final value of property X call
// eval-function as specified.
@postprocess text eval(text_transform(prop("text"), prop("text-transform")));
@postprocess final-casing-width eval(prop("width") + prop("casing-width") * 2);
@postprocess final-icon-image eval(cond(
  prop('icon-image') && (!regexp_test('\\.', prop('icon-image'))),
    style_id() . '.icons/' . prop('icon-image') . '-' . prop('icon-color') . '-' . prop('icon-width'). '.svg',
    prop('icon-image')
  ));
@postprocess final-symbol-image eval(
style_id() . '.icons/symbol-' . prop('symbol-shape') .'-'. prop('symbol-size') .'-'. prop('symbol-stroke-width') .'-'. prop('symbol-stroke-color') .'-'. prop('symbol-fill-color') .'.svg');
@postprocess text-offset eval(_text_offset(prop('text-offset'), prop('text-anchor-vertical'), prop('icon-image'), prop('icon-width'), prop('symbol-shape'), prop('symbol-size'), prop('symbol-stroke-width')));
@postprocess final-repeat-image-offset eval(
    prop('repeat-image-offset') +
    switch(prop('repeat-image-align'),
        'center', 0,
        'top', -_global_data('repeat-image', prop('repeat-image'), 1) / 2,
        'bottom', _global_data('repeat-image', prop('repeat-image'), 1) / 2
    )
);

// @depend_property: don't check values for e.g. 'text-position' if no 'text' is set
@depend_property width "offset;color;linejoin;linecap;dashes;dashes-background-color;miterlimit";
@depend_property image "";
@depend_property repeat-image "repeat-image-offset;repeat-image-align;final-repeat-image-offset";
@depend_property casing-width "casing-offset;casing-color;casing-linejoin;casing-linecap;casing-dashes;final-casing-width;casing-dashes-background-color;casing-miterlimit";
@depend_property symbol-shape "final-symbol-image;symbol-shape;symbol-size;symbol-stroke-width;symbol-stroke-color;symbol-fill-color;symbol-rotation";
@depend_property icon-image "final-icon-image;icon-color;icon-width;icon-rotation";
@depend_property text "text-color;text-halo-color;text-halo-radius;text-offset;max-width;text-position;text-transform;font-family;font-weight;font-style;font-size;character-spacing;text-position;text-spacing;text-transform;text-anchor-vertical;text-anchor-horizontal"; // after icon-image and symbol-shape, so that defaults are already set (for text-offset)
@depend_property fill-color "";
@depend_property fill-image "";

// @style_element_property
@style_element_property fill "fill-color;fill-image";
@style_element_property casing casing-width;
@style_element_property line "width;image;repeat-image";
@style_element_property point "icon-image;symbol-shape";
@style_element_property point-text text;
@style_element_property line-text text;

// General
@default_value z-index 0;
// PointSymbolizer
@default_value icon-color #444444;
@default_value icon-width 24;
@default_value icon-rotation 0;
@default_value icon-allow-overlap false;
@default_value icon-ignore-placement false;
@default_value final-icon-image ; // used internally to add width and casing-width
@default_value symbol-size 10;
@default_value symbol-stroke-width 1;
@default_value symbol-stroke-color #ffc800;
@default_value symbol-fill-color #0000ff;
@default_value symbol-rotation 0;
@default_value symbol-allow-overlap false;
@default_value symbol-ignore-placement false;

// PolygonSymbolizer
// PolygonPatternSymbolizer
// LineSymbolizer
@default_value offset 0;
@default_value color #ffffff;
@default_value linejoin round;
@default_value linecap butt;
@default_value dashes none;
@default_value dashes-background-color #00000000;
@default_value miterlimit 4;
// Casing LineSymbolizer
@default_value casing-offset ;
@default_value casing-color ;
@default_value casing-linejoin ;
@default_value casing-linecap ;
@default_value casing-dashes none;
@default_value casing-dashes-background-color #00000000;
@default_value final-casing-width ; // used internally to add width and casing-width
@default_value repeat-image-align "center";
// LinePatternSymbolizer
// TextSymbolizer
@default_value font-family "DejaVu Sans";
@default_value font-size 12;
@default_value text-color #000000;
@default_value text-halo-color #ffffff;
@default_value text-halo-radius 0;
@default_value text-offset ;
@default_value text-anchor-vertical below;
@default_value text-anchor-horizontal middle;
@default_value max-width 0;
@default_value text-allow-overlap false;
@default_value text-transform none;
// Show points, lines and shields after all other symbolizers
@default_value point-layer 100;
@default_value point-text-layer 101;
@default_value line-text-layer 102;

*::(*) {
  layer: eval(any(int(tag('layer')), 0));
}
canvas {
  fill-color: #00000000;
  fill-image: ;
  buffer: 0;
}

