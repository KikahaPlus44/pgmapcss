== PGMapCSS ==
PGMapCSS is an implementation of [[http://www.mapcss.org/|MapCSS]] in Postgresql
/ plpgsql for use with [[http://www.mapnik.org/|Mapnik]]. Therefore you can
reduce your Mapnik stylesheet to a minimum; all style calculation is done in
the database, providing more advanced functionality.

There were already several efforts to implement stylesheets based on Cascading Stylesheets (CSS) for Mapnik:
* [[https://github.com/mapnik/Cascadenik|Cascadenik]]
* [[http://wiki.openstreetmap.org/wiki/Carto|CartoCSS]]

All these tools are pre-processors, that convert a CSS stylesheet into a Mapnik stylesheet. PGMapCSS takes a different approach: The stylesheet is compiled into a PostgreSQL/plpgsql function which is evaluated at runtime. Therefore more advanced calculations are possible, even geometric alterations (though not supported yet).

The Mapnik style just contains the database query/queries and the basic styles, referencing all options from the database queries. You can think of those styles as templates, which you can reference from your style sheet.

Read [[doc/MapCSS.creole]] to learn about the features of PGMapCSS's MapCSS implementation.

WARNING: As of 2013, Mapnik does not support using expressions for all/most symbolizer parameters. Therefore usefulness of PGMapCSS is quite limited. See [[doc/compatibility.creole|Compatibility]] for more information.

== Installation ==
=== Create a database ===
This installation has been done on Ubuntu 12.04 LTS with PostgreSQL 9.1 and PostGIS 1.5. If you use different versions on different systems the paths may vary.

{{{
psql "create database DB"
}}}

Add hstore and postgis functionality
{{{
psql -d DB "create extension hstore"
psql -d DB -f /usr/share/postgresql/9.1/contrib/postgis-1.5/postgis.sql
psql -d DB -f /usr/share/postgresql/9.1/contrib/postgis-1.5/spatial_ref_sys.sql
}}}

=== Import OSM data ===
Import OSM-file with osm2pgsql
{{{
./osm2pgsql -d DB -s -S default.style --hstore-all --hstore-add-index -G data.osm
}}}

You may vary the parameters, but --hstore-all is really important.

=== Load PGMapCSS ===
The following script loads all necessary functions to compile / run PGMapCSS
{{{
./install.sh -d DB
}}}

Compile test.mapnik / test.mapcss style file
{{{
./load.sh -d DB
}}}

Insert correct database parameters in test.mapnik (look for DB, USER, PASSWORD).

Now you should have a working test.mapnik XML file, which you can use in renderd or other programs.

== Using PGMapCSS ==
The postgresql function pgmapcss_install(style_id, file_content) converts the passed css file to a function. It will be available as postgresql function named 'css_check_{style_id}()'.

=== Function {style_id}_check ===

Parameters:
|= Parameter |= Type |= Description
| id | text | Object ID, e.g. 'N1234'
| tags | hstore | All tags of the object
| way | geometry | The geometry of the object
| types | text[] | An array of the types of the object, e.g. 'node', 'way', 'relation' or 'area', 'line', ...
| scale_denominator | float | The current zoom level as scale_denominator

Every call returns 0..n rows, depending on the matching css rules. There will be one returned row for every layer, ordered by 'object-z-index' (asc, default 0).

Return values:
|= Name |= Type |= Description
| _style | hstore | All resulting properties
| _layer | text | The current layer, default: 'default'.
| _tags | hstore | The resulting tags, as modified by set and unset statements.
| _geo | geometry | Modified geometry
| ... | text | A column for every property found in the CSS file.

Example usage (for style_id 'test'):
{{{
select * from test_check(object, render_context);
}}}

where object is of type {{{pgmapcss_object}}}:
|= Column |= Type |= Description
| id | text | the id of the object (recommended: N1234 for nodes, W1234 for ways, R1234 for relations)
| tags | hstore | the tags of the object (e.g. '"highway"=>"primary", "name"=>"main Road"')
| way | geometry | the geometry of the object
| types | text[] | object types that match this object, e.g. Array['way', 'area']

You may use the function {{{pgmapcss_object(id, tags, way, hstore)}}} to create an object for test_check.

The {{{render_context}}} can be derived with the function {{{pgmapcss_render_context(bbox, scale_denominator)}}}.

Full example usage:
{{{
select (result).* from (
  select test_check(
    pgmapcss_object('N'||osm_id, tags, way, Array['way', 'line']),
    pgmapcss_render_context(!bbox!, !scale_denominator!)
  ) result from planet_osm_point where way && !bbox! offset 0
) t
}}}

Notes:
* {{{!bbox!}}} and {{{!scale_denominator!}}} will be replaced by Mapnik by the current bounding box resp. scale denominator, see [[https://trac.openstreetmap.org/browser/subversion/applications/rendering/mapnik/zoom-to-scale.txt|zoom-to-scale.txt]] for valid values.
* {{{where way && !bbox!}}}: as the geometry may be modified by PGMapCSS, PostgreSQL can't use indexes on the resulting column; therefore all objects in the database would be included on every request (expect very bad performance). Using this statement PostgreSQL can use indexes on the source geometry and only objects matching the bounding box will be included.
* {{{offset 0}}}: the statement {{{(result).*}}} in the select statement will call test_check() for every resulting column; {{{offset 0}}} prevents this behaviour.

Example output:
|= _style |= _layer |= _tags |= _way |= color |= width |= z-index |= object-z-index
| "color"=>"#A0A0A0", "width"=>"7", "z-index"=>"-20", "object-z-index"=>"-1" | casing | "name"=>"Testroad", "highway"=>"primary" | some geometry | #A0A0A0 | 7 | -20 | -1
| "color"=>"#ff0000", "width"=>"4" | default | "name"=>"Testroad", "highway"=>"primary" | some geometry | #ff0000 | 4 | |
